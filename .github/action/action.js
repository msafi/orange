!function(e){var r={};function t(a){if(r[a])return r[a].exports;var n=r[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=r,t.d=function(e,r,a){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:a})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)t.d(a,n,function(r){return e[r]}.bind(null,n));return a},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=8)}([function(e,r){e.exports=require("@actions/core")},function(e,r){e.exports=require("@actions/github")},function(e,r){e.exports=require("bluebird")},function(e,r){e.exports=require("@actions/artifact")},function(e,r){e.exports=require("fs-extra")},function(e,r){e.exports=require("electron-packager")},function(e,r){e.exports=require("archiver")},function(e,r){e.exports=require("@actions/exec")},function(e,r,t){"use strict";t.r(r);var a=t(0),n=t(2),o=t(3),c=t(4),i=t.n(c),u=t(5),l=t(6),s=t(1),f=t(7);const p=async(e,r)=>{await Object(f.exec)(e,null,{ignoreReturnCode:!0})>0&&a.setFailed(r)},g=/^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/,d=()=>{const e=(()=>{const e=s.context.ref;return e.substr("refs/tags/".length,e.length)})();return r=e,g.test(r)?e:s.context.sha;var r},m=o.create(),b=d(),v={"macos-latest":{electronPackagerPlatform:"darwin",archiveName:`Orange-v${b}-macOS.zip`},"ubuntu-latest":{electronPackagerPlatform:"linux",archiveName:`Orange-v${b}-Linux.zip`},"windows-latest":{electronPackagerPlatform:"win32",archiveName:`Orange-v${b}-Windows.zip`}};n.try((async function(){const e=a.getInput("command");return e?await p(e,`\`${e}\` failed!`):"build-packages"===a.getInput("task")?await async function(){console.log("Building source code..."),await p("npm run build","`npm run build` failed");const e=a.getInput("os",{required:!0}),r=v[e];console.log(`Creating Electron package on ${e}...`),await u({arch:"x64",dir:"artifacts/webpack",out:"artifacts/electronPackager",icon:"src/assets/orange",overwrite:!0,platform:r.electronPackagerPlatform,prune:!1,appVersion:d()}),console.log("Compressing Electron package..."),await new Promise(t=>{const n=l("zip",{zlib:{level:9}}),o=i.a.createWriteStream(`artifacts/electronPackager/${r.archiveName}`);n.pipe(o),n.directory(`artifacts/electronPackager/Orange-${r.electronPackagerPlatform}-x64/`,!1),o.on("close",t),n.on("error",r=>{console.error(r),a.setFailed(`Could not create a zip archive on ${e}`)}),n.finalize()}),console.log(`Uploading artifact ${r.archiveName}...`),await m.uploadArtifact(r.archiveName,[`artifacts/electronPackage/${r.archiveName}`],"artifacts/electronPackager")}():void 0})).catch(a.debug)}]);