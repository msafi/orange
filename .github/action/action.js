!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=9)}([function(e,t){e.exports=require("@actions/core")},function(e,t){e.exports=require("@actions/github")},function(e,t){e.exports=require("bluebird")},function(e,t){e.exports=require("@actions/artifact")},function(e,t){e.exports=require("fs-extra")},function(e,t){e.exports=require("electron-packager")},function(e,t){e.exports=require("archiver")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("@actions/exec")},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r(2),a=r(3),c=r(4),i=r.n(c),u=r(5),l=r(6),s=r(7),f=r(1),p=r(8);const d=async(e,t)=>{await Object(p.exec)(e,null,{ignoreReturnCode:!0})>0&&n.setFailed(t)},g=/^([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/,b=()=>{const e=(()=>{const e=f.context.ref;return e.substr("refs/tags/".length,e.length)})();return t=e,g.test(t)?e:f.context.sha;var t},m=a.create(),x=b(),v={"macos-latest":{electronPackagerPlatform:"darwin",archiveName:`Orange-v${x}-macOS.zip`},"ubuntu-latest":{electronPackagerPlatform:"linux",archiveName:`Orange-v${x}-Linux.zip`},"windows-latest":{electronPackagerPlatform:"win32",archiveName:`Orange-v${x}-Windows.zip`}};o.try((async function(){const e=n.getInput("command");if(console.log("command",e),e)return await d(e,`\`${e}\` failed!`);const t=n.getInput("task");return console.log("task",t),"build-package"===t?await async function(){console.log("Building source code..."),await d("npm run build","`npm run build` failed");const e=n.getInput("os",{required:!0}),{archiveName:t,electronPackagerPlatform:r}=v[e];console.log(`Creating Electron package on ${e}...`),await u({arch:"x64",dir:"artifacts/webpack",out:"artifacts/electronPackager",icon:"src/assets/orange",overwrite:!0,platform:r,prune:!1,appVersion:b()}),console.log("Compressing Electron package..."),await new Promise(o=>{const a=l("zip",{zlib:{level:9}}),c=i.a.createWriteStream(`artifacts/electronPackager/${t}`);a.pipe(c),a.directory(`artifacts/electronPackager/Orange-${r}-x64/`,!1),c.on("close",o),a.on("error",t=>{console.error(t),n.setFailed(`Could not create a zip archive on ${e}`)}),a.finalize()}),console.log(`Uploading ${t}...`);try{await m.uploadArtifact(Object(s.basename)(t),[`artifacts/electronPackager/${t}`],"artifacts/electronPackager")}catch(e){console.error(e),n.setFailed(`Could not upload ${t}`)}}():void 0})).catch(n.debug)}]);